parametros= list()
a=1:4
b=2:5
lm(b~a)
plot(a,b)
summary(lm(a~b))
Modelo_MLE = function(x, y, Lx){
lambda_x = Lx
S_xx = c()
S_yy = c()
S_xy = c()
beta_hat      = c()
alfa_hat      = c()
mu_x_hat      = c()
sigma2_e_hat  = c()
sigma2_u_hat  = c()
Det_Sigma_hat = c()
#Fim da declaração de variaveis
##### Calculando as somas de quadrados
x_barra = mean(x)
y_barra = mean(y)
S_xx    = mean((x - x_barra)^2)
S_yy    = mean((y - y_barra)^2)
S_xy    = mean((x - x_barra)*(y - y_barra))
##Estimativas de máxima verossimilhança (e.m.v.)
beta_hat     = ((lambda_x + 1)*S_xy)/(lambda_x*S_xx)
alfa_hat     = y_barra - (beta_hat*x_barra)
sigma2_u_hat = S_xx/(lambda_x + 1)
sigma2_e_hat = (lambda_x*(S_yy*S_xx - S_xy^2) - S_xy^2)/(lambda_x*S_xx)
data.frame(Beta     = beta_hat,
Alpha    = alfa_hat,
Sigma2_u = sigma2_u_hat,
Sigma2_e = sigma2_e_hat)
}
Modelo_MLE(1:4,2:5,1)
summary(lm(a~b))
Modelo_MLE(1:4,2:5,1)
Modelo_MLE(1:40,2:41,1)
summary(lm(a~b))
a=2:41
b=1:40
summary(lm(a~b))
summary(lm(a~b))
Modelo_MLE(1:40,2:41,1)
Modelo_MLE = function(x, y, lambda_x){
#Fim da declaração de variaveis
##### Calculando as somas de quadrados
x_barra = mean(x)
y_barra = mean(y)
S_xx    = mean((x - x_barra)^2)
S_yy    = mean((y - y_barra)^2)
S_xy    = mean((x - x_barra)*(y - y_barra))
##Estimativas de máxima verossimilhança (e.m.v.)
beta_hat     = ((lambda_x + 1)*S_xy)/(lambda_x*S_xx)
alfa_hat     = y_barra - (beta_hat*x_barra)
sigma2_u_hat = S_xx/(lambda_x + 1)
sigma2_e_hat = (lambda_x*(S_yy*S_xx - S_xy^2) - S_xy^2)/(lambda_x*S_xx)
data.frame(Beta     = beta_hat,
Alpha    = alfa_hat,
Sigma2_u = sigma2_u_hat,
Sigma2_e = sigma2_e_hat)
}
Modelo_MLE(1:40,2:41,1)
Modelo_MLE(1:40,2:41,2)
Modelo_MLE(1:40,2:41,20)
Modelo_MLE = function(x, y, lambda_x){
#Fim da declaração de variaveis
##### Calculando as somas de quadrados
x_barra = mean(x)
y_barra = mean(y)
S_xx    = mean((x - x_barra)^2)
S_yy    = mean((y - y_barra)^2)
S_xy    = mean((x - x_barra)*(y - y_barra))
##Estimativas de máxima verossimilhança (e.m.v.)
beta_hat     = ((lambda_x + 1)*S_xy)/(lambda_x*S_xx)
alfa_hat     = y_barra - (beta_hat*x_barra)
sigma2_u_hat = S_xx/(lambda_x + 1)
sigma2_e_hat = (lambda_x*(S_yy*S_xx - S_xy^2) - S_xy^2)/(lambda_x*S_xx)
data.frame(Beta     = beta_hat,
Alpha    = alfa_hat,
Sigma2_u = sigma2_u_hat,
Sigma2_e = sigma2_e_hat)
}
?lm
?lm
rnorm(100)
plot(rnorm(100),rnorm(100))
rt(100)
rt(100,df =2)
plot(rt(100,df =2),rt(100,df =2))
plot(rt(100,df =2),rt(100,df =5))
plot(rt(100,df =2),rt(100,df =50))
plot(rt(100,df =2),rt(100,df =30))
plot(rt(100,df =20),rt(100,df =30))
plot(rt(100,df =20),rnorm(100))
plot(rt(100,df =2),rnorm(100))
plot(rt(100,df =50),rnorm(100))
plot(rt(100,df =40),rnorm(100))
plot(rt(100,df =40),rnorm(100))
plot(rt(100,df =40),rnorm(100))
plot(rt(100,df =40),rnorm(100))
plot(rt(100,df =40),rnorm(100))
plot(rt(100,df =40),rnorm(100))
plot(rt(100,df =40),rnorm(100,sd = 5))
plot(rt(100,df =40),rnorm(100,sd = 5))
plot(rt(100,df =40),rnorm(100,sd = 50))
plot(rt(100,df =40),rnorm(100,sd = 50))
plot(seq(1:30,0.5),rnorm(100,sd = 50))
plot(seq(1:50,0.5),rnorm(100,sd = 50))
plot(seq(1:50,n=100),rnorm(100,sd = 50))
plot(seq(1,50,n=100),rnorm(100,sd = 50))
plot(seq(1,50,100),rnorm(100,sd = 50))
?seq
seq(1,30,length.out = 100)
plot(seq(1,30,length.out = 100),rnorm(100,sd = 50))
plot(seq(1,30,length.out = 100),rnorm(100))
plot(seq(1,30,length.out = 100),rnorm(100))
plot(seq(1,30,length.out = 100),rnorm(100))
plot(seq(1,30,length.out = 100),rnorm(100))
plot(seq(1,30,length.out = 100),rnorm(100))
plot(seq(1,30,length.out = 100),)
plot(seq(1,30,length.out = 100),runif(1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),runif(100,1,30))
plot(seq(1,30,length.out = 100),cumsum(runif(100,1,30)))
plot(seq(1,30,length.out = 100),cumsum(runif(100,1,30)))
plot(seq(1,30,length.out = 100),cumsum(runif(100,1,30)))
5
plot(seq(1,50,length.out = 100),cumsum(runif(100,1,30)))
plot(seq(1,80,length.out = 100),cumsum(runif(100,1,30)))
plot(seq(1,800,length.out = 100),cumsum(runif(100,1,30)))
plot(seq(1,100,length.out = 100),cumsum(runif(100,1,30)))
plot(seq(1,100,length.out = 100),cumsum(runif(100,1,100)))
plot(seq(1,100,length.out = 100),cumsum(runif(100,1,100)))
plot(seq(1,100,length.out = 100),cumsum(runif(100,1,100)))
plot(seq(1,100,length.out = 100),cumsum(runif(100,1,100)))
x = seq(1,100,length.out = 100)
y = cumsum(runif(100,1,100)
lambda_x = 2
MEV(x, y, lambda_x)
MEV = function(x, y, lambda_x){
#Fim da declaração de variaveis
##### Calculando as somas de quadrados
x_barra = mean(x)
y_barra = mean(y)
S_xx    = mean((x - x_barra)^2)
S_yy    = mean((y - y_barra)^2)
S_xy    = mean((x - x_barra)*(y - y_barra))
##Estimativas de máxima verossimilhança (e.m.v.)
beta_hat     = ((lambda_x + 1)*S_xy)/(lambda_x*S_xx)
alfa_hat     = y_barra - (beta_hat*x_barra)
sigma2_u_hat = S_xx/(lambda_x + 1)
sigma2_e_hat = (lambda_x*(S_yy*S_xx - S_xy^2) - S_xy^2)/(lambda_x*S_xx)
data.frame(Beta     = beta_hat,
Alpha    = alfa_hat,
Sigma2_u = sigma2_u_hat,
Sigma2_e = sigma2_e_hat)
}
x = seq(1,100,length.out = 100)
y = cumsum(runif(100,1,100)
lambda_x = 2
MEV(x, y, lambda_x)
x = seq(1,100,length.out = 100)
y = cumsum(runif(100,1,100))
lambda_x = 2
MEV(x, y, lambda_x)
